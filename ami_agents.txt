This solution involves two main parts:

AMI Build Script: This script will be executed during the AMI creation process (e.g., using Packer, EC2 Image Builder, or manually building an EC2 instance and then creating an AMI from it). Its purpose is to install the agent binaries and ensure they are not configured or enabled.

Cloud-init Script: This script will be provided as user data when launching an EC2 instance from the AMI. Its purpose is to configure and enable the agents for that specific instance using instance-specific details.

Part 1: AMI Build Script (e.g., install_agents_for_ami.sh)

This script installs the necessary packages, places placeholders for configuration, and ensures services are stopped and disabled so they don't auto-configure during AMI creation.

Important Notes:

You'll need to download the actual agent RPMs from your respective vendor portals. Replace taniumclient.rpm, falcon-sensor.rpm, and qualys-cloud-agent.rpm with the correct paths.

The paths /opt/tanium, /opt/CrowdStrike, /opt/qualys are examples. The actual installation paths might vary per vendor.

This script assumes you are running it as root or with sudo.

#!/bin/bash

# --- AMI Build Script ---
# This script installs the necessary agent binaries but leaves them unconfigured
# and disabled. It is intended to be run during the AMI creation process.

set -euo pipefail

echo "--- Starting AMI Agent Installation Process ---"

# Define temporary directory for downloads (adjust as needed for your build process)
DOWNLOAD_DIR="/tmp/agent_rpms"
mkdir -p "${DOWNLOAD_DIR}"

# --- 1. Tanium Client Installation ---
echo "Installing Tanium Client..."
# In a real scenario, you'd download this from your Tanium server or a secure location
# Example: curl -o "${DOWNLOAD_DIR}/taniumclient.rpm" "https://your-tanium-server/TaniumClient.rpm"
# For this example, assume it's pre-staged or copied to ${DOWNLOAD_DIR}
if [ -f "${DOWNLOAD_DIR}/taniumclient.rpm" ]; then
    yum install -y "${DOWNLOAD_DIR}/taniumclient.rpm"
    # Ensure the config file is clean or doesn't contain specific server info
    # The default location is usually /opt/Tanium/TaniumClient/TaniumClient.cfg
    TANIUM_CFG="/opt/Tanium/TaniumClient/TaniumClient.cfg"
    if [ -f "${TANIUM_CFG}" ]; then
        echo "# Tanium Client Configuration (reset for AMI)" > "${TANIUM_CFG}"
        echo "# ServerName=" >> "${TANIUM_CFG}"
        echo "# ServerPort=17472" >> "${TANIUM_CFG}"
        echo "# LogVerbosity=1" >> "${TANIUM_CFG}"
        chmod 644 "${TANIUM_CFG}"
        chown taniumclient:taniumclient "${TANIUM_CFG}" || true # taniumclient user might not exist yet
    fi
    systemctl stop taniumclient.service || true
    systemctl disable taniumclient.service || true
    echo "Tanium Client installed and reset."
else
    echo "ERROR: Tanium Client RPM not found at ${DOWNLOAD_DIR}/taniumclient.rpm. Skipping Tanium."
fi

# --- 2. CrowdStrike Falcon Sensor Installation ---
echo "Installing CrowdStrike Falcon Sensor..."
# Example: curl -o "${DOWNLOAD_DIR}/falcon-sensor.rpm" "https://your-crowdstrike-repo/falcon-sensor.rpm"
if [ -f "${DOWNLOAD_DIR}/falcon-sensor.rpm" ]; then
    yum install -y "${DOWNLOAD_DIR}/falcon-sensor.rpm"
    # The CID is set via falconctl, so no config file to reset here.
    # Just ensure the service is stopped and disabled.
    systemctl stop falcon-sensor.service || true
    systemctl disable falcon-sensor.service || true
    echo "CrowdStrike Falcon Sensor installed and reset."
else
    echo "ERROR: CrowdStrike Falcon Sensor RPM not found at ${DOWNLOAD_DIR}/falcon-sensor.rpm. Skipping CrowdStrike."
fi

# --- 3. Qualys Cloud Agent Installation ---
echo "Installing Qualys Cloud Agent..."
# Example: curl -o "${DOWNLOAD_DIR}/qualys-cloud-agent.rpm" "https://qualysguard.qg2.apps.qualys.com/cloud-agent/linux/qualys-cloud-agent.rpm"
if [ -f "${DOWNLOAD_DIR}/qualys-cloud-agent.rpm" ]; then
    yum install -y "${DOWNLOAD_DIR}/qualys-cloud-agent.rpm"
    # Qualys agent registers itself, so ensure it hasn't registered.
    # The registration status is typically managed internally by the agent.
    # Just stop and disable the service to prevent auto-registration during AMI build.
    systemctl stop qualys-cloud-agent.service || true
    systemctl disable qualys-cloud-agent.service || true
    echo "Qualys Cloud Agent installed and reset."
else
    echo "ERROR: Qualys Cloud Agent RPM not found at ${DOWNLOAD_DIR}/qualys-cloud-agent.rpm. Skipping Qualys."
fi

# --- Clean up ---
echo "Cleaning up..."
rm -rf "${DOWNLOAD_DIR}"
yum clean all
rm -rf /var/cache/yum

echo "--- AMI Agent Installation Process Complete ---"

Part 2: Cloud-init Script (User Data for EC2 Instance Launch)

This script will be executed when an EC2 instance is launched from the AMI created in Part 1. It configures and enables the agents.

Security Warning:
NEVER hardcode sensitive information (like CIDs, Activation IDs, Server names/ports) directly into your cloud-init scripts, especially for production environments.
Instead, use AWS SSM Parameter Store or AWS Secrets Manager to store these values securely and retrieve them within your cloud-init script using the AWS CLI.

For demonstration purposes, placeholders YOUR_TANIUM_SERVER_NAME, YOUR_TANIUM_SERVER_PORT, etc., are used.

#cloud-config
# --- Cloud-init Script for EC2 Instance Provisioning ---
# This script configures and enables the pre-installed agents using instance-specific values.
# It is passed as 'User Data' when launching an EC2 instance from the AMI.

# Cloud-init runs as root by default.

# Configuration for logging (optional but recommended)
output: {all: '| tee -a /var/log/cloud-init-agent-config.log'}

runcmd:
  - echo "--- Starting Cloud-init Agent Configuration ---" | tee -a /var/log/cloud-init-agent-config.log
  - set -euo pipefail # Exit immediately if a command exits with a non-zero status or on unbound variables

  # --- SECURE CONFIGURATION RETRIEVAL (RECOMMENDED) ---
  # Instead of hardcoding, retrieve from SSM Parameter Store or Secrets Manager.
  # Example for SSM Parameter Store (requires IAM permissions for 'ssm:GetParameters'):
  # PARAM_STORE_PATH="/my-org/agents/"
  # TANIUM_SERVER_NAME=$(aws ssm get-parameter --name "${PARAM_STORE_PATH}tanium-server-name" --with-decryption --query Parameter.Value --output text)
  # TANIUM_SERVER_PORT=$(aws ssm get-parameter --name "${PARAM_STORE_PATH}tanium-server-port" --query Parameter.Value --output text)
  # CROWDSTRIKE_CID=$(aws ssm get-parameter --name "${PARAM_STORE_PATH}crowdstrike-cid" --with-decryption --query Parameter.Value --output text)
  # QUALYS_ACTIVATION_ID=$(aws ssm get-parameter --name "${PARAM_STORE_PATH}qualys-activation-id" --with-decryption --query Parameter.Value --output text)
  # QUALYS_CUSTOMER_ID=$(aws ssm get-parameter --name "${PARAM_STORE_PATH}qualys-customer-id" --with-decryption --query Parameter.Value --output text)

  # --- PLACEHOLDERS FOR DEMONSTRATION (REPLACE WITH REAL VALUES OR SECURE RETRIEVAL) ---
  - TANIUM_SERVER_NAME="YOUR_TANIUM_SERVER_NAME" # e.g., "tanium.example.com"
  - TANIUM_SERVER_PORT="YOUR_TANIUM_SERVER_PORT" # e.g., "17472"
  - CROWDSTRIKE_CID="YOUR_CROWDSTRIKE_CID" # e.g., "0123456789ABCDEF0123456789ABCDEF-FG"
  - QUALYS_ACTIVATION_ID="YOUR_QUALYS_ACTIVATION_ID" # e.g., "QUALYS_ACTIVATION_ID_STRING"
  - QUALYS_CUSTOMER_ID="YOUR_QUALYS_CUSTOMER_ID" # e.g., "QUALYS_CUSTOMER_ID_STRING"

  # --- 1. Configure and Enable Tanium Client ---
  - echo "Configuring Tanium Client..." | tee -a /var/log/cloud-init-agent-config.log
  - TANIUM_CFG_FILE="/opt/Tanium/TaniumClient/TaniumClient.cfg"
  - echo "ServerName=${TANIUM_SERVER_NAME}" > "${TANIUM_CFG_FILE}"
  - echo "ServerPort=${TANIUM_SERVER_PORT}" >> "${TANIUM_CFG_FILE}"
  - echo "LogVerbosity=1" >> "${TANIUM_CFG_FILE}"
  - chmod 644 "${TANIUM_CFG_FILE}"
  - chown taniumclient:taniumclient "${TANIUM_CFG_FILE}" || true # Ensure correct ownership if user exists
  - systemctl daemon-reload # Reload systemd units
  - systemctl enable taniumclient.service
  - systemctl start taniumclient.service
  - systemctl status taniumclient.service | tee -a /var/log/cloud-init-agent-config.log
  - echo "Tanium Client configured and started." | tee -a /var/log/cloud-init-agent-config.log

  # --- 2. Configure and Enable CrowdStrike Falcon Sensor ---
  - echo "Configuring CrowdStrike Falcon Sensor..." | tee -a /var/log/cloud-init-agent-config.log
  - /opt/CrowdStrike/falconctl -s --cid="${CROWDSTRIKE_CID}"
  - systemctl enable falcon-sensor.service
  - systemctl start falcon-sensor.service
  - systemctl status falcon-sensor.service | tee -a /var/log/cloud-init-agent-config.log
  - echo "CrowdStrike Falcon Sensor configured and started." | tee -a /var/log/cloud-init-agent-config.log

  # --- 3. Configure and Enable Qualys Cloud Agent ---
  - echo "Configuring Qualys Cloud Agent..." | tee -a /var/log/cloud-init-agent-config.log
  # Qualys agent registration command
  - /usr/local/qualys/cloud-agent/bin/qualys-cloud-agent -a "${QUALYS_ACTIVATION_ID}" -c "${QUALYS_CUSTOMER_ID}"
  - systemctl enable qualys-cloud-agent.service
  - systemctl start qualys-cloud-agent.service
  - systemctl status qualys-cloud-agent.service | tee -a /var/log/cloud-init-agent-config.log
  - echo "Qualys Cloud Agent configured and started." | tee -a /var/log/cloud-init-agent-config.log

  - echo "--- Cloud-init Agent Configuration Complete ---" | tee -a /var/log/cloud-init-agent-config.log
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Yaml
IGNORE_WHEN_COPYING_END
How to Use This Solution
Step 1: Prepare your Agent RPMs

Download taniumclient.rpm, falcon-sensor.rpm, and qualys-cloud-agent.rpm from your respective vendor portals. Place them in a known location (e.g., an S3 bucket or locally on the machine where you're building the AMI).

Step 2: Build the RHEL 8 AMI

You can use AWS EC2 Image Builder, Packer, or a manual process:

Using AWS EC2 Image Builder (Recommended for automation):

Create an Image Pipeline.

In the "Build components" section, create a new "Build component".

Choose RHEL 8.

In the "Content" section, upload the install_agents_for_ami.sh script. Ensure it's executable (chmod +x).

In the "Build phase", add steps to copy your RPMs to the DOWNLOAD_DIR specified in the script (/tmp/agent_rpms/) and then execute the install_agents_for_ami.sh script.

Configure the rest of your Image Builder pipeline and run it.

Using Packer (Recommended for automation):

Create a Packer template (.pkr.hcl).

Define a source block for an RHEL 8 AMI.

In the build block, add a provisioner "shell" that uploads the RPMs and then runs the install_agents_for_ami.sh script.

# Example Packer snippet
provisioner "file" {
  source = "path/to/your/taniumclient.rpm"
  destination = "/tmp/agent_rpms/taniumclient.rpm"
}
provisioner "file" {
  source = "path/to/your/falcon-sensor.rpm"
  destination = "/tmp/agent_rpms/falcon-sensor.rpm"
}
provisioner "file" {
  source = "path/to/your/qualys-cloud-agent.rpm"
  destination = "/tmp/agent_rpms/qualys-cloud-agent.rpm"
}

provisioner "shell" {
  script = "install_agents_for_ami.sh" # Ensure this script is in the same dir or specified path
}
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Hcl
IGNORE_WHEN_COPYING_END

Run packer build your_template.pkr.hcl.

Manual Method (Less Recommended for production):

Launch a standard RHEL 8 EC2 instance.

SSH into the instance.

Upload your agent RPMs to the instance (e.g., to /tmp/agent_rpms).

Upload the install_agents_for_ami.sh script to the instance.

Run sudo bash install_agents_for_ami.sh.

Once the script finishes, ensure the services are disabled:
sudo systemctl is-enabled taniumclient.service (should say disabled)
sudo systemctl is-enabled falcon-sensor.service (should say disabled)
sudo systemctl is-enabled qualys-cloud-agent.service (should say disabled)

Stop the instance.

From the EC2 console, right-click the stopped instance, select "Image and templates" > "Create image".

Step 3: Launch EC2 Instances from the AMI

Go to the EC2 console and launch a new instance.

Select the AMI you just created.

Proceed through the launch wizard.

In the "Configure instance details" step, expand "Advanced details".

Under "User data", select "As text" and paste the entire cloud-init script (including #cloud-config).

Crucially: Replace the placeholder values (YOUR_TANIUM_SERVER_NAME, YOUR_CROWDSTRIKE_CID, etc.) with your actual configuration details. For production, strongly consider retrieving these securely from AWS SSM Parameter Store or Secrets Manager as outlined in the cloud-init script comments.

If you use SSM/Secrets Manager, ensure the EC2 instance's IAM role has permissions to read those parameters/secrets.

Launch the instance.

Verification after Launch:

After the EC2 instance boots up:

SSH into the instance.

Check the cloud-init logs: cat /var/log/cloud-init-output.log and the custom log /var/log/cloud-init-agent-config.log.

Verify the service statuses:
sudo systemctl status taniumclient.service (should be active (running))
sudo systemctl status falcon-sensor.service (should be active (running))
sudo systemctl status qualys-cloud-agent.service (should be active (running))

Check agent-specific logs or commands for successful registration:

Tanium: /opt/Tanium/TaniumClient/TaniumClient.log

CrowdStrike: sudo /opt/CrowdStrike/falconctl -g --cid (should show your CID) or /var/log/falcon-sensor.log

Qualys: /usr/local/qualys/cloud-agent/log/qualys-cloud-agent.log

This approach ensures that your AMI is clean and generic, while each launched EC2 instance gets its unique, secure configuration via cloud-init.